//////////////////////////////////////////////////////////////////////////
(function () {
    var e, t, r, n, o;
    languages = new Array, e = "https://eks-subscription-api-lumen-service.epayco.io/", languages.es = {
        errors: [{
            type: 101,
            title: "[101] Datos ilegibles",
            description: "Los Datos son ilegibles compruebe la integridad del formulario"
        }, {
            type: 102,
            title: "[102] Error publicKey",
            description: "La publicKey es ilegible o no se tiene acceso, por favor compruebe"
        }, {
            type: 103,
            title: "[103] Campo erroneó o vación",
            description: "El formato es incorrecto o esta en:"
        }]
    }, languages.en = {
        errors: [{
            type: 101,
            title: "[101] Illegible data",
            description: "The Data is illegible check the integrity of the form"
        }, {
            type: 102,
            title: "[102] Error publicKey",
            description: "The publicKey is unreadable or not accessible, please check"
        }, {
            type: 103,
            title: "[103] Bad or empty field",
            description: "The format is incorrect or the field is empty:"
        }]
    }, t = function (e, t) {
        if ("undefined" == typeof localStorage || void 0 === localStorage.getItem) return null;
        try {
            return localStorage.getItem("hashKey", "1"), localStorage.removeItem("hashKey"), localStorage(e, t)
        } catch (e) {
            return e, null
        }
    }, r = function (e, t) {
        if ("undefined" == typeof localStorage || void 0 === localStorage.setItem) return null;
        try {
            return localStorage.setItem("hashKey", "1"), localStorage.removeItem("hashKey"), localStorage(e, t)
        } catch (e) {
            return e, null
        }
    }, getError = function (e, t, r) {
        $(r).find("button").prop("disabled", !1);
        let i = ePayco.getLanguage();
        if ("es" == i || "en" == i) var n = languages[ePayco.getLanguage()].errors, o = e; else {
            var a;
            n = languages.en.errors, o = e
        }
        for (var c = 0; c < n.length; c++) o == n[c].type && (a = n[c]);
        if (t) {
            var s = a.description.slice(0, 47);
            a.description = s + " " + t
        }
        return console.log(a), a
    }, dump = function (e) {
        return e
    }, n = t("epayco_publish_key"), o = t("epayco_language"), window.ePayco || (window.ePayco = {
        setPublicKey: function (e) {
            "string" == typeof e ? r("epayco_publish_key", n = e) : getError(102)
        }, setLanguage: function (e) {
            "string" == typeof e ? r("epayco_language", o = e) : getError(102)
        }, getPublicKey: function () {
            return n
        }, getLanguage: function () {
            return o
        }, _errors: {
            alert: function (e) {
                alert(e)
            }
        }, _utils: {
            objectKeys: function (e) {
                var t, r;
                for (r in t = [], e) Object.prototype.hasOwnProperty.call(e, r) && t.push(r);
                return t
            }, parseForm: function (e) {
                var t, r, n, o, a, c, s, l, h, u, f, d, p, y, g, v, _, m, w, B, k, b, S;
                if (s = {}, "object" == typeof e) {
                    if ("undefined" != typeof jQuery && (e instanceof jQuery || "jquery" in Object(e)) && "object" != typeof (e = e.get()[0])) return {};
                    if (e.nodeType) {
                        for (b = e.getElementsByTagName("textarea"), c = e.getElementsByTagName("input"), k = e.getElementsByTagName("select"), t = new Array(b.length + c.length + k.length), i = l = 0, m = b.length - 1; l <= m; i = l += 1) t[i] = b[i];
                        for (i = d = 0, w = c.length - 1; d <= w; i = d += 1) t[i + b.length] = c[i];
                        for (i = y = 0, B = k.length - 1; y <= B; i = y += 1) t[i + b.length + c.length] = k[i];
                        for (v = 0, u = t.length; v < u; v++) if ((a = t[v]) && (n = a.getAttribute("data-epayco"))) {
                            for (S = "SELECT" === a.tagName ? a.value : a.getAttribute("value") || a.innerHTML || a.value, g = null, p = s, h = null, _ = 0, f = (o = n.replace(/\]/g, "").replace(/\-/g, "_").split(/\[/)).length; _ < f; _++) p[r = o[_]] || (p[r] = {}), g = p, h = r, p = p[r];
                            g[h] = S
                        }
                    } else s = e
                }
                return s
            }, requestUrl: function (e) {
                (new XMLHttpRequest).withCredentials
            }, o:function(e, t){
                if (e && "undefined" !== t) try {
                    return CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(e), t).toString().toString()
                } catch (r) {
                    return console.log(r), CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(e), CryptoJS.enc.Utf8.parse(t).toString()).toString()
                } else console.log("hay algunos valores invalidos")
            }, encryptE: function(t,n,r){
                for (var e = [], t = 0; t < r.customer.length; t++) e.push({
                    type: r.customer[t].type,
                    value: ePayco._utils.o(r.customer[t].value, n)
                });
                var i = {type: "publicKey", value: ePayco.getPublicKey()},
                    a = {type: "session", value: localStorage.getItem("keyUserIndex")};
                return e.push(i), e.push(a), e
            }, createTokenize: async function (a, i) {
                try {
                   // const aa = {};
                    const aa = {};
                    const response = await fetch(e + "token/tokenize", {
                        method: "POST",
                        mode: "cors",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        body: new URLSearchParams({ values: aa })
                    });
                    const data = await response.json();
                    debugger;
                    if (data?.data?.status === "created") {
                        i(data, null);
                    } else {
                        i(null, data.data);
                    }
                } catch (error) {
                    console.log("Error al tokenizar el medio de pago");
                    // Intentar extraer JSON de error si está disponible
                    let errorData = null;
                    try {
                        const errorResponse = await error.response.json();
                        errorData = errorResponse;
                    } catch (_) {
                        errorData = error;
                    }
                    i(null, errorData);
                }
            }
            ,createTokenEncrypt: async function (t, r, i) {
                try {
                    const response = await fetch(e + "token/encrypt", {
                        method: "POST",
                        mode: "cors",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        body: new URLSearchParams({
                            public_key: ePayco.getPublicKey(),
                            session: t
                        })
                    });
                    const result = await response.json();
                    dump(result);
                    const token = result.data.token;
                    const encryptedData = JSON.stringify(ePayco._utils.encryptE(result, token, r));
                    setTimeout(() => {
                        ePayco._utils.createTokenize(encryptedData, i);
                    }, 1000);
                } catch (error) {
                    const errorData = error?.responseJSON || error;
                    i(null, errorData);
                    dump(errorData);
                }
            }
            , createGuid: function () {
                function e() {
                    return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1)
                }

                return e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e()
            }, log: function (e) {
                if ("undefined" != typeof console && console.log) return console.log(e)
            }
        }
    })
}.call(this), function () {
    var e, t, r, i, n, o, a = [].indexOf || function (e) {
        for (var t = 0, r = this.length; t < r; t++) if (t in this && this[t] === e) return t;
        return -1
    };
    t = [{name: "amex", pattern: /^3[47]/, valid_length: [15]}, {
        name: "diners_club_carte_blanche",
        pattern: /^30[0-5]/,
        valid_length: [14]
    }, {name: "diners_club_international", pattern: /^36/, valid_length: [14]}, {
        name: "laser",
        pattern: /^(6304|670[69]|6771)/,
        valid_length: [16, 17, 18, 19]
    }, {name: "visa_electron", pattern: /^(4026|417500|4508|4844|491(3|7))/, valid_length: [16]}, {
        name: "visa",
        pattern: /^4/,
        valid_length: [16]
    }, {name: "mastercard", pattern: /^5[1-5]/, valid_length: [16]}, {
        name: "maestro",
        pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
        valid_length: [12, 13, 14, 15, 16, 17, 18, 19]
    }], e = ["visa", "mastercard", "maestro", "visa_electron", "amex", "diners_club_carte_blanche", "diners_club_international"], r = function (r) {
        var i, n, o, c, s;
        for (s = function () {
            var r, n, o, c;
            for (c = [], r = 0, n = t.length; r < n; r++) o = (i = t[r]).name, a.call(e, o) >= 0 && c.push(i);
            return c
        }(), o = 0, c = s.length; o < c; o++) if (n = s[o], r.match(n.pattern)) return n;
        return null
    }, is_valid_luhn = function (e) {
        var t, r, i, n, o, a;
        for (a = 0, n = r = 0, i = (o = e.split("").reverse()).length; r < i; n = ++r) t = +(t = o[n]), a += n % 2 ? (t *= 2) < 10 ? t : t - 9 : t;
        return a % 10 == 0
    }, i = function (e, t) {
        var r;
        return r = e.length, a.call(t.valid_length, r) >= 0
    }, n = function (e) {
        return "string" == typeof e && e.match(/^[\d]{1,2}$/) ? parseInt(e) : e
    }, o = function (e) {
        return "number" == typeof e && e < 100 && (e += 2e3), "string" == typeof e && e.match(/^([\d]{2,2}|20[\d]{2,2})$/) ? (e.match(/^([\d]{2,2})$/) && (e = "20" + e), parseInt(e)) : e
    }, ePayco.card = {}, ePayco.card.name = function (e) {
        return (new RegExp).test(e)
    }, ePayco.card.email = function (e) {
        return new RegExp(/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/).test(e)
    }, ePayco.card.validateNumber = function (e) {
        var t, n, o;
        return e = "string" == typeof e ? e.replace(/[ -]/g, "") : "number" == typeof e ? e.toString() : "", o = !1, n = !1, null != (t = r(e)) && (o = is_valid_luhn(e), n = i(e, t)), o && n
    }, ePayco.card.validateCVC = function (e) {
        return "number" == typeof e && e >= 0 && e < 1e4 || "string" == typeof e && null !== e.match(/^[\d]{3,4}$/)
    }, ePayco.card.validateExpirationDate = function (e, t) {
        var r, i;
        return r = n(e), i = o(t), "number" == typeof r && r > 0 && r < 13 && "number" == typeof i && i > 2020 && i < 2035 && new Date(i, r, new Date(i, r, 0).getDate()) > new Date
    }
}).call(this); 
(function () {
    ePayco.token = {}, ePayco.token.create = async function (e, t) {
        var r = ePayco._utils.parseForm(e);
        if ("object" == typeof r && ePayco._utils.objectKeys(r).length > 0) if (r.card) {
            var i, n,z, ts = r.card.date_exp.split("/");
            let expYearDate = ts[1].length == 2 ? "20"+ts[1] : ts[1];
            i = {
                customer: [{
                    type: "name",
                    value: r.card.name,
                    required: !0,
                    validate: ePayco.card.name(r.card.name)
                }, {
                    type: "email",
                    value: r.card.email,
                    required: !0,
                    validate: ePayco.card.email(r.card.email)
                }, {
                    type: "number",
                    value: r.card.number.replace(/ /g, ""),
                    required: !0,
                    validate: ePayco.card.validateNumber(r.card.number.replace(/ /g, ""))
                }, {
                    type: "cvc",
                    value: r.card.cvc,
                    required: !0,
                    validate: ePayco.card.validateCVC(r.card.cvc)
                }, {
                    type: "date_exp",
                    value: ts[0] + "/" + expYearDate,
                    required: !0,
                    validate: ePayco.card.validateExpirationDate(ts[0], expYearDate)
                }]
            },n = localStorage.getItem("keyUserIndex") ?? (localStorage.setItem("keyUserIndex", ePayco._utils.createGuid()), localStorage.getItem("keyUserIndex"));
            for (var o = 0; o < i.customer.length; o++) {
                var a = i.customer[o];
                if (a.required && !a.validate) {
                    let r = getError(103, a.type, e);
                    return t(r.description, null), !1
                }
            }
            /*
            z = localStorage.getItem("tokenCreating");
            if(z == "false"){
                console.log("processing....")
                localStorage.setItem("tokenCreating", true);
                await ePayco._utils.createTokenEncrypt(n, i, function (e, r) {
                    localStorage.setItem("tokenCreating", false);
                    t(e || null)
                });
            }
*/
        ePayco._utils.createTokenEncrypt(n, i, function (e, r) {
            
                t(r, e || null)
        })
        } else getError(101)
    }
}).call(this);
